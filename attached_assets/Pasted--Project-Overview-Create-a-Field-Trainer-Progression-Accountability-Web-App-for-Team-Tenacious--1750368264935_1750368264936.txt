📌 Project Overview
Create a Field Trainer Progression & Accountability Web App for Team Tenacious, optimized for mobile and non-tech-savvy users.

This is version 1 (V1):

Frontend-only for now, using local state and dummy JSON data.

Trainers/Admins can temporarily add reps, update checklists, and see dashboards.

Google Sign-In stub included.

Placeholder functions for EZTexting/Zapier triggers with clear TODO comments.

🎯 Goals
Track new recruits through a 13-step progression checklist to become Independent (Field Trainer).

Allow Field Trainers to check off sub-tasks → auto-complete steps.

Provide Trainer-specific dashboards and an Admin dashboard to see funnel status.

Prepare a modular codebase for easy database swap and future backend.

Keep everything extremely simple, clear, and mobile-friendly.

🏗️ Tech Requirements
✅ Framework: React (or lightweight equivalent — your call).
✅ UI: Mobile-first responsive (TailwindCSS or plain CSS — up to AI).
✅ Auth: Google Sign-In stub with dummy auth state.
✅ Data Storage: Local JSON + React state, with in-app edits/writes working temporarily.
✅ Folder Structure: Modular:

markdown
Copy
Edit
/src
  /components
    - Auth
    - Checklist
    - RepCard
    - TrainerDashboard
    - AdminDashboard
  /data
    - dummyReps.json
    - dummyTrainers.json
  /services
    - auth.js
    - zapierPlaceholder.js
  App.js
✅ Functions:

Add/Update reps.

Mark sub-tasks complete → auto-check milestone.

Timestamp and log who made changes.

Show Trainer’s reps and stages.

Admin dashboard for all reps.

✅ EZText/Zapier:

Add placeholder functions for:

Triggering milestone-based text messages.

Triggering drip campaigns.

Add clear TODOs so I can wire up later.

📊 Data Model
json
Copy
Edit
{
  "Rep": {
    "id": "UUID",
    "name": "string",
    "email": "string",
    "phone": "string",
    "fieldTrainerId": "string",
    "stage": "1-13",
    "promotionDate": "ISO date",
    "milestones": [
      {
        "stepId": 1,
        "title": "Step Name",
        "subTasks": [
          {
            "taskId": "UUID",
            "description": "string",
            "completed": true,
            "completedAt": "ISO date",
            "completedBy": "Trainer ID"
          }
        ]
      }
    ]
  },
  "FieldTrainer": {
    "id": "UUID",
    "name": "string",
    "email": "string",
    "assignedRepIds": ["array of Rep IDs"]
  }
}
✅ Key Features to Implement
1️⃣ Google Sign-In stub — show “Sign In with Google”, fake auth state.
2️⃣ Rep Checklist — 13 steps, each with sub-tasks. Tap to mark sub-tasks → auto-complete step when all done.
3️⃣ Trainer Dashboard — list assigned reps, current stage, quick add new rep, update progression.
4️⃣ Admin Dashboard — see all reps, filter by stage, view funnel counts.
5️⃣ Audit Log — for now, just show who marked what and when.
6️⃣ Mobile UX — simple, big buttons, minimal text.
7️⃣ Placeholder EZText/Zapier calls — zapierPlaceholder.js with clear TODO comments for future integration.

✅ Success Criteria
Can add reps and update progress locally.

Can sign in/out (mock) and see correct view.

Trainers only see their reps; Admin sees all.

Easy to read on a phone.

Codebase is modular and documented.

✅ Deliverables
Clean working React project in Replit.

Dummy data files.

Clear README explaining:

How to run locally.

How to swap dummy data for real DB later.

Where to wire up EZText/Zapier.

✅ Kickoff
Start building with dummy data + local state.
I’ll plug in real back-end and automations later.
Keep code clear, modular, and documented!